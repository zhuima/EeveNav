---
export interface Props {
  title?: string;
  description?: string;
  keywords?: string[];
  image?: string;
  imageAlt?: string;
  url?: string;
  type?: 'website' | 'article';
  author?: string;
  publishDate?: Date;
  modifiedDate?: Date;
  category?: string;
  tags?: string[];
  noindex?: boolean;
  canonicalUrl?: string;
}

const {
  title = 'EeveNav - 精选资源导航',
  description = '精心整理的工具、文章、教程和灵感合集，让每一次搜索都有价值。发现优质的开发工具、设计资源、学习教程和创意灵感。',
  keywords = ['资源导航', '开发工具', '设计资源', '学习教程', '创意灵感', 'EeveNav'],
  image = '/og-image.jpg',
  imageAlt = 'EeveNav - 精选资源导航',
  url,
  type = 'website',
  author = 'EeveNav Team',
  publishDate,
  modifiedDate,
  category,
  tags = [],
  noindex = false,
  canonicalUrl
} = Astro.props;

// 获取当前URL
const currentUrl = url || Astro.url.href;
const siteName = 'EeveNav';
const siteUrl = new URL(Astro.url.origin);

// 生成完整的图片URL
const fullImageUrl = image.startsWith('http') ? image : new URL(image, siteUrl).href;

// 合并关键词
const allKeywords = [...keywords, ...tags];

// 生成结构化数据
const generateStructuredData = () => {
  const baseData = {
    "@context": "https://schema.org",
    "@type": type === 'article' ? "Article" : "WebSite",
    "name": title,
    "description": description,
    "url": currentUrl,
    "image": fullImageUrl,
    "publisher": {
      "@type": "Organization",
      "name": siteName,
      "url": siteUrl.href,
      "logo": {
        "@type": "ImageObject",
        "url": new URL('/logo.png', siteUrl).href
      }
    }
  };

  if (type === 'article') {
    return {
      ...baseData,
      "@type": "Article",
      "headline": title,
      "datePublished": publishDate?.toISOString(),
      "dateModified": modifiedDate?.toISOString() || publishDate?.toISOString(),
      "author": {
        "@type": "Person",
        "name": author
      },
      "articleSection": category,
      "keywords": allKeywords.join(', ')
    };
  } else if (type === 'website') {
    return {
      ...baseData,
      "@type": "WebSite",
      "potentialAction": {
        "@type": "SearchAction",
        "target": {
          "@type": "EntryPoint",
          "urlTemplate": `${siteUrl.href}?search={search_term_string}`
        },
        "query-input": "required name=search_term_string"
      }
    };
  }

  return baseData;
};

const structuredData = generateStructuredData();
---

<!-- 基础Meta标签 -->
<title>{title}</title>
<meta name="description" content={description} />
{allKeywords.length > 0 && <meta name="keywords" content={allKeywords.join(', ')} />}
<meta name="author" content={author} />

<!-- 搜索引擎指令 -->
{noindex && <meta name="robots" content="noindex, nofollow" />}
{!noindex && <meta name="robots" content="index, follow" />}

<!-- 语言和地区 -->
<meta name="language" content="zh-CN" />
<meta name="geo.region" content="CN" />

<!-- 规范URL -->
{canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
{!canonicalUrl && <link rel="canonical" href={currentUrl} />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={fullImageUrl} />
<meta property="og:image:alt" content={imageAlt} />
<meta property="og:url" content={currentUrl} />
<meta property="og:site_name" content={siteName} />
<meta property="og:locale" content="zh_CN" />

{type === 'article' && (
  <>
    {publishDate && <meta property="article:published_time" content={publishDate.toISOString()} />}
    {modifiedDate && <meta property="article:modified_time" content={modifiedDate.toISOString()} />}
    {author && <meta property="article:author" content={author} />}
    {category && <meta property="article:section" content={category} />}
    {tags.map(tag => <meta property="article:tag" content={tag} />)}
  </>
)}

<!-- Twitter Card -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={fullImageUrl} />
<meta name="twitter:image:alt" content={imageAlt} />
<meta name="twitter:site" content="@EeveNav" />
<meta name="twitter:creator" content="@EeveNav" />

<!-- 额外的Meta标签 -->
<meta name="theme-color" content="#3b82f6" />
<meta name="msapplication-TileColor" content="#3b82f6" />
<meta name="format-detection" content="telephone=no" />

<!-- 移动端优化 -->
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />
<meta name="apple-mobile-web-app-title" content={siteName} />

<!-- 结构化数据 -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<!-- Favicon -->
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/manifest.json" />

<!-- DNS预解析和预连接 -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//cdn.tailwindcss.com" />
<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title={`${siteName} RSS Feed`} href="/rss.xml" />