---
import AdminLayout from '../../layouts/AdminLayout.astro'
import { ensureDatabaseData } from '../../lib/migration'

// 检查用户是否已登录
const cookies = Astro.cookies
const isAuthenticated = cookies.get('admin_auth')?.value === 'authenticated'

// 如果未登录，重定向到登录页面
if (!isAuthenticated) {
  return Astro.redirect('/login')
}

// 确保数据库有数据
await ensureDatabaseData()
---

<AdminLayout title="文章管理" activeSection="posts">
  <div class="space-y-6">
    <!-- 页面标题 -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">文章管理</h1>
        <p class="text-gray-600 mt-1">管理所有文章内容</p>
      </div>
      <button 
        id="add-post-btn"
        class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white text-sm font-semibold rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
        </svg>
        新增文章
      </button>
    </div>

    <!-- 文章列表 -->
    <div class="bg-white rounded-2xl shadow-sm border border-gray-100">
      <div class="p-6 border-b border-gray-100">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold text-gray-900">文章列表</h2>
          <div class="flex items-center space-x-4">
            <input 
              type="text" 
              placeholder="搜索文章..." 
              class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              id="search-input"
            >
            <select class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="">所有分类</option>
              <option value="教程">教程</option>
              <option value="前端开发">前端开发</option>
              <option value="设计">设计</option>
            </select>
          </div>
        </div>
      </div>
      
      <div class="overflow-hidden">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">文章信息</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">分类</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">标签</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">发布时间</th>
                <th class="px-6 py-4 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">操作</th>
              </tr>
            </thead>
            <tbody id="posts-table" class="bg-white divide-y divide-gray-100">
              <!-- 动态内容 -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- 添加/编辑文章模态框 -->
  <div id="post-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
    <div class="bg-white rounded-2xl shadow-2xl w-full max-w-5xl max-h-[90vh] overflow-hidden" onclick="event.stopPropagation()">
      <div class="p-6 border-b border-gray-200 flex justify-between items-center bg-gradient-to-r from-blue-50 to-purple-50">
        <h3 class="text-xl font-bold text-gray-900" id="modal-title">添加文章</h3>
        <button type="button" id="close-modal-btn" class="p-2 text-gray-400 hover:text-gray-600 hover:bg-white rounded-lg transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div class="overflow-y-auto max-h-[calc(90vh-80px)]">
        <form id="post-form" class="p-6">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-semibold text-gray-900 mb-2">标题 *</label>
              <input 
                type="text" 
                name="title" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                placeholder="请输入文章标题"
              />
            </div>
            
            <div>
              <label class="block text-sm font-semibold text-gray-900 mb-2">Slug *</label>
              <input 
                type="text" 
                name="slug" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                placeholder="url-friendly-slug"
              />
            </div>
            
            <div>
              <label class="block text-sm font-semibold text-gray-900 mb-2">分类 *</label>
              <input 
                type="text" 
                name="category" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                placeholder="文章分类"
              />
            </div>
            
            <div>
              <label class="block text-sm font-semibold text-gray-900 mb-2">发布时间 *</label>
              <input 
                type="datetime-local" 
                name="date" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
            </div>
            
            <div class="lg:col-span-2">
              <label class="block text-sm font-semibold text-gray-900 mb-2">封面图片URL *</label>
              <input 
                type="url" 
                name="cover" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                placeholder="https://example.com/image.jpg"
              />
            </div>
            
            <div class="lg:col-span-2">
              <label class="block text-sm font-semibold text-gray-900 mb-2">外部链接URL</label>
              <input 
                type="url" 
                name="external_url" 
                placeholder="https://example.com（可选）"
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
            </div>
            
            <div class="lg:col-span-2">
              <label class="block text-sm font-semibold text-gray-900 mb-2">描述 *</label>
              <textarea 
                name="des" 
                required 
                rows="3"
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none"
                placeholder="请输入文章描述"
              ></textarea>
            </div>
            
            <div class="lg:col-span-2">
              <label class="block text-sm font-semibold text-gray-900 mb-2">标签</label>
              <input 
                type="text" 
                name="tags" 
                placeholder="用逗号分隔多个标签，如：JavaScript, React, 前端"
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
            </div>
            
            <div class="lg:col-span-2">
              <label class="block text-sm font-semibold text-gray-900 mb-2">内容 *</label>
              <textarea 
                name="content" 
                required 
                rows="12"
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none font-mono text-sm"
                placeholder="支持 Markdown 格式..."
              ></textarea>
            </div>
          </div>
          
          <div class="flex justify-end space-x-4 mt-8 pt-6 border-t border-gray-200">
            <button 
              type="button" 
              id="cancel-btn"
              class="px-6 py-3 text-sm font-semibold text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-xl transition-colors"
            >
              取消
            </button>
            <button 
              type="submit"
              class="px-6 py-3 text-sm font-semibold text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 rounded-xl transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              保存文章
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
// 复用admin.astro中的JavaScript功能
// 加载统计信息
async function loadStats() {
  try {
    const response = await fetch('/api/blog?action=posts')
    if (!response.ok) {
      throw new Error(`Posts API failed: ${response.status}`)
    }
    const posts = await response.json()
    const postsArray = Array.isArray(posts) ? posts : []
    loadPosts(postsArray)
  } catch (error) {
    console.error('加载文章失败:', error)
    const tbody = document.getElementById('posts-table')!
    tbody.innerHTML = '<tr><td colspan="5" class="text-center py-4 text-gray-500">加载失败，请刷新页面重试</td></tr>'
  }
}

// 加载文章列表
function loadPosts(posts: any[]) {
  const tbody = document.getElementById('posts-table')!
  
  if (!Array.isArray(posts) || posts.length === 0) {
    tbody.innerHTML = '<tr><td colspan="5" class="text-center py-4 text-gray-500">暂无文章</td></tr>'
    return
  }
  
  tbody.innerHTML = posts.map((post: any) => `
    <tr>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${post.title || '无标题'}</div>
        <div class="text-sm text-gray-500">${post.slug || '无slug'}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
          ${post.category || '未分类'}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${Array.isArray(post.tags) ? post.tags.join(', ') : '无标签'}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${post.date ? new Date(post.date).toLocaleDateString() : '未知日期'}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <button 
          onclick="window.editPost(${post.id})"
          class="text-indigo-600 hover:text-indigo-900 mr-3"
        >
          编辑
        </button>
        <button 
          onclick="window.copyPost(${post.id})"
          class="text-green-600 hover:text-green-900 mr-3"
        >
          复制
        </button>
        <button 
          onclick="window.deletePost(${post.id})"
          class="text-red-600 hover:text-red-900"
        >
          删除
        </button>
      </td>
    </tr>
  `).join('')
}

// 页面加载时初始化
document.addEventListener('DOMContentLoaded', () => {
  loadStats()
  
  // 绑定模态框事件
  const modal = document.getElementById('post-modal')!
  const form = document.getElementById('post-form')! as HTMLFormElement
  const addBtn = document.getElementById('add-post-btn')!
  const cancelBtn = document.getElementById('cancel-btn')!
  const closeModalBtn = document.getElementById('close-modal-btn')!

  // 关闭模态框函数
  function closeModal() {
    modal.classList.add('hidden')
    modal.classList.remove('flex')
  }

  // 打开模态框函数
  function openModal() {
    modal.classList.remove('hidden')
    modal.classList.add('flex')
  }

  addBtn.addEventListener('click', () => {
    document.getElementById('modal-title')!.textContent = '添加文章'
    form.reset()
    form.dataset.mode = 'add'
    form.dataset.id = ''
    openModal()
  })

  cancelBtn.addEventListener('click', (e) => {
    e.preventDefault()
    closeModal()
  })

  closeModalBtn.addEventListener('click', (e) => {
    e.preventDefault()
    closeModal()
  })

  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal()
    }
  })

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      closeModal()
    }
  })

  // 表单提交
  form.addEventListener('submit', async (e) => {
    e.preventDefault()
    
    const formData = new FormData(form)
    const tagsValue = formData.get('tags') as string
    const dateValue = formData.get('date') as string
    const externalUrl = formData.get('external_url') as string
    
    const data = {
      title: formData.get('title') as string,
      slug: formData.get('slug') as string,
      category: formData.get('category') as string,
      date: new Date(dateValue),
      cover: formData.get('cover') as string,
      des: formData.get('des') as string,
      tags: tagsValue ? tagsValue.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag) : [],
      content: formData.get('content') as string,
      external_url: externalUrl || undefined,
    }

    try {
      const isEdit = form.dataset.mode === 'edit'
      const response = await fetch('/api/blog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: isEdit ? 'update' : 'add',
          data: isEdit ? { ...data, id: Number.parseInt(form.dataset.id || '0') } : data,
        }),
      })

      if (response.ok) {
        closeModal()
        loadStats()
        alert(isEdit ? '文章更新成功！' : '文章添加成功！')
      } else {
        const error = await response.json()
        alert(`操作失败: ${error.error}`)
      }
    } catch (error) {
      console.error('提交失败:', error)
      alert('操作失败，请重试')
    }
  })

  // 编辑函数
  window.editPost = async (id: number) => {
    try {
      const response = await fetch(`/api/blog?action=posts`)
      const posts = await response.json()
      const post = posts.find((p: any) => p.id === id)

      if (!post) {
        alert('文章不存在')
        return
      }

      document.getElementById('modal-title')!.textContent = '编辑文章'
      form.dataset.mode = 'edit'
      form.dataset.id = id.toString()

      // 填充表单
      ;(form.querySelector('[name="title"]') as HTMLInputElement).value = post.title
      ;(form.querySelector('[name="slug"]') as HTMLInputElement).value = post.slug
      ;(form.querySelector('[name="category"]') as HTMLInputElement).value = post.category
      ;(form.querySelector('[name="date"]') as HTMLInputElement).value = new Date(post.date).toISOString().slice(0, 16)
      ;(form.querySelector('[name="cover"]') as HTMLInputElement).value = post.cover
      ;(form.querySelector('[name="des"]') as HTMLTextAreaElement).value = post.des
      ;(form.querySelector('[name="tags"]') as HTMLInputElement).value = post.tags.join(', ')
      ;(form.querySelector('[name="content"]') as HTMLTextAreaElement).value = post.content
      ;(form.querySelector('[name="external_url"]') as HTMLInputElement).value = post.external_url || ''

      openModal()
    } catch (error) {
      console.error('加载文章失败:', error)
      alert('加载文章失败')
    }
  }

  // 删除函数
  window.deletePost = async (id: number) => {
    if (!confirm('确定要删除这篇文章吗？')) {
      return
    }

    try {
      const response = await fetch('/api/blog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'delete',
          data: { id },
        }),
      })

      if (response.ok) {
        loadStats()
        alert('文章删除成功！')
      } else {
        const error = await response.json()
        alert(`删除失败: ${error.error}`)
      }
    } catch (error) {
      console.error('删除失败:', error)
      alert('删除失败，请重试')
    }
  }

  // 复制文章函数
  window.copyPost = async (id: number) => {
    if (!confirm('确定要复制这篇文章吗？')) {
      return
    }

    try {
      const response = await fetch('/api/blog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'copy-post',
          data: { postId: id },
        }),
      })

      if (response.ok) {
        const result = await response.json()
        loadStats()
        alert(`文章复制成功！新文章ID: ${result.id}`)
      } else {
        const error = await response.json()
        alert(`复制失败: ${error.error}`)
      }
    } catch (error) {
      console.error('复制失败:', error)
      alert('复制失败，请重试')
    }
  }
})

// 声明全局函数
declare global {
  interface Window {
    editPost: (id: number) => void
    deletePost: (id: number) => void
    copyPost: (id: number) => void
  }
}
</script>