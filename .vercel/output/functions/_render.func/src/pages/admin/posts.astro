---
import AdminLayout from '../../layouts/AdminLayout.astro'
import { ensureDatabaseData } from '../../lib/migration'

// 检查用户是否已登录
const cookies = Astro.cookies
const isAuthenticated = cookies.get('admin_auth')?.value === 'authenticated'

// 如果未登录，重定向到登录页面
if (!isAuthenticated) {
  return Astro.redirect('/login')
}

// 确保数据库有数据
await ensureDatabaseData()
---

<AdminLayout title="文章管理" activeSection="posts">
  <div class="space-y-6">
    <!-- 页面标题 -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">文章管理</h1>
        <p class="text-gray-600 mt-1">管理所有文章内容</p>
      </div>
      <a 
        href="/admin/posts/new"
        class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white text-sm font-semibold rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
        </svg>
        新增文章
      </a>
    </div>

    <!-- 文章列表 -->
    <div class="bg-white rounded-2xl shadow-sm border border-gray-100">
      <div class="p-6 border-b border-gray-100">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold text-gray-900">文章列表</h2>
          <div class="flex items-center space-x-4">
            <input 
              type="text" 
              placeholder="搜索文章..." 
              class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              id="search-input"
            >
            <select class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="">所有分类</option>
              <option value="教程">教程</option>
              <option value="前端开发">前端开发</option>
              <option value="设计">设计</option>
            </select>
          </div>
        </div>
      </div>
      
      <div class="overflow-hidden">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">文章信息</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">分类</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">标签</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">发布时间</th>
                <th class="px-6 py-4 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">操作</th>
              </tr>
            </thead>
            <tbody id="posts-table" class="bg-white divide-y divide-gray-100">
              <!-- 动态内容 -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
// 复用admin.astro中的JavaScript功能
// 加载统计信息
async function loadStats() {
  try {
    const response = await fetch('/api/blog?action=posts')
    if (!response.ok) {
      throw new Error(`Posts API failed: ${response.status}`)
    }
    const posts = await response.json()
    const postsArray = Array.isArray(posts) ? posts : []
    loadPosts(postsArray)
  } catch (error) {
    console.error('加载文章失败:', error)
    const tbody = document.getElementById('posts-table')!
    tbody.innerHTML = '<tr><td colspan="5" class="text-center py-4 text-gray-500">加载失败，请刷新页面重试</td></tr>'
  }
}

// 加载文章列表
function loadPosts(posts: any[]) {
  const tbody = document.getElementById('posts-table')!
  
  if (!Array.isArray(posts) || posts.length === 0) {
    tbody.innerHTML = '<tr><td colspan="5" class="text-center py-4 text-gray-500">暂无文章</td></tr>'
    return
  }
  
  tbody.innerHTML = posts.map((post: any) => `
    <tr>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${post.title || '无标题'}</div>
        <div class="text-sm text-gray-500">${post.slug || '无slug'}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
          ${post.category || '未分类'}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${Array.isArray(post.tags) ? post.tags.join(', ') : '无标签'}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${post.date ? new Date(post.date).toLocaleDateString() : '未知日期'}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <button 
          onclick="window.editPost(${post.id})"
          class="text-indigo-600 hover:text-indigo-900 mr-3"
        >
          编辑
        </button>
        <button 
          onclick="window.copyPost(${post.id})"
          class="text-green-600 hover:text-green-900 mr-3"
        >
          复制
        </button>
        <button 
          onclick="window.deletePost(${post.id})"
          class="text-red-600 hover:text-red-900"
        >
          删除
        </button>
      </td>
    </tr>
  `).join('')
}

// 页面加载时初始化
document.addEventListener('DOMContentLoaded', () => {
  loadStats()
  
  // 编辑函数 - 现在跳转到编辑页面
  window.editPost = async (id: number) => {
    // 跳转到编辑页面（未来实现）
    window.location.href = `/admin/posts/edit/${id}`;
  }

  // 删除函数
  window.deletePost = async (id: number) => {
    if (!confirm('确定要删除这篇文章吗？')) {
      return
    }

    try {
      const response = await fetch('/api/blog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'delete',
          data: { id },
        }),
      })

      if (response.ok) {
        loadStats()
        alert('文章删除成功！')
      } else {
        const error = await response.json()
        alert(`删除失败: ${error.error}`)
      }
    } catch (error) {
      console.error('删除失败:', error)
      alert('删除失败，请重试')
    }
  }

  // 复制文章函数
  window.copyPost = async (id: number) => {
    if (!confirm('确定要复制这篇文章吗？')) {
      return
    }

    try {
      const response = await fetch('/api/blog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'copy-post',
          data: { postId: id },
        }),
      })

      if (response.ok) {
        const result = await response.json()
        loadStats()
        alert(`文章复制成功！新文章ID: ${result.id}`)
      } else {
        const error = await response.json()
        alert(`复制失败: ${error.error}`)
      }
    } catch (error) {
      console.error('复制失败:', error)
      alert('复制失败，请重试')
    }
  }
})

// 声明全局函数
declare global {
  interface Window {
    editPost: (id: number) => void
    deletePost: (id: number) => void
    copyPost: (id: number) => void
  }
}
</script>