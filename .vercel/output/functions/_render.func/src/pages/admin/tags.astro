---
import AdminLayout from '../../layouts/AdminLayout.astro'
import { ensureDatabaseData } from '../../lib/migration'

// 检查用户是否已登录
const cookies = Astro.cookies
const isAuthenticated = cookies.get('admin_auth')?.value === 'authenticated'

// 如果未登录，重定向到登录页面
if (!isAuthenticated) {
  return Astro.redirect('/login')
}

// 确保数据库有数据
await ensureDatabaseData()
---

<AdminLayout title="标签管理" activeSection="tags">
  <div class="space-y-6">
    <!-- 页面标题 -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">标签管理</h1>
        <p class="text-gray-600 mt-1">管理文章标签</p>
      </div>
    </div>

    <!-- 标签统计 -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="bg-gradient-to-r from-purple-500 to-pink-600 rounded-2xl p-6 text-white">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center mr-4">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-white/80">总标签数</p>
            <p class="text-3xl font-bold" id="total-tags">-</p>
          </div>
        </div>
      </div>

      <div class="bg-gradient-to-r from-teal-500 to-cyan-600 rounded-2xl p-6 text-white">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center mr-4">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-white/80">使用标签的文章</p>
            <p class="text-3xl font-bold" id="tagged-posts">-</p>
          </div>
        </div>
      </div>
    </div>

    <!-- 标签云 -->
    <div class="bg-white rounded-2xl shadow-sm border border-gray-100">
      <div class="p-6 border-b border-gray-100">
        <h2 class="text-lg font-semibold text-gray-900">标签云</h2>
        <p class="text-sm text-gray-500 mt-1">点击标签查看使用该标签的文章</p>
      </div>
      
      <div class="p-6">
        <div id="tags-cloud" class="flex flex-wrap gap-3">
          <!-- 动态内容 -->
        </div>
      </div>
    </div>

    <!-- 标签详细列表 -->
    <div class="bg-white rounded-2xl shadow-sm border border-gray-100">
      <div class="p-6 border-b border-gray-100">
        <h2 class="text-lg font-semibold text-gray-900">标签详情</h2>
      </div>
      
      <div class="overflow-hidden">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">标签名称</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">使用次数</th>
                <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">相关文章</th>
                <th class="px-6 py-4 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">操作</th>
              </tr>
            </thead>
            <tbody id="tags-table" class="bg-white divide-y divide-gray-100">
              <!-- 动态内容 -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
// 加载标签数据
async function loadTags() {
  try {
    const [tagsRes, postsRes] = await Promise.all([
      fetch('/api/blog?action=tags'),
      fetch('/api/blog?action=posts')
    ])

    if (!tagsRes.ok || !postsRes.ok) {
      throw new Error('API请求失败')
    }

    const tags = await tagsRes.json()
    const posts = await postsRes.json()
    
    const tagsArray = Array.isArray(tags) ? tags : []
    const postsArray = Array.isArray(posts) ? posts : []

    // 计算标签使用统计
    const tagStats = new Map()
    const taggedPostsSet = new Set()
    
    postsArray.forEach((post: any) => {
      if (post.tags && Array.isArray(post.tags)) {
        post.tags.forEach((tag: string) => {
          if (tag && tag.trim()) {
            const tagName = tag.trim()
            tagStats.set(tagName, (tagStats.get(tagName) || 0) + 1)
            taggedPostsSet.add(post.id)
          }
        })
      }
    })

    // 更新统计信息
    document.getElementById('total-tags')!.textContent = tagStats.size.toString()
    document.getElementById('tagged-posts')!.textContent = taggedPostsSet.size.toString()

    // 加载标签云和表格
    loadTagsCloud(Array.from(tagStats.entries()))
    loadTagsTable(Array.from(tagStats.entries()), postsArray)
  } catch (error) {
    console.error('加载标签失败:', error)
    const tbody = document.getElementById('tags-table')!
    tbody.innerHTML = '<tr><td colspan="4" class="text-center py-4 text-gray-500">加载失败，请刷新页面重试</td></tr>'
  }
}

// 加载标签云
function loadTagsCloud(tagStats: [string, number][]) {
  const container = document.getElementById('tags-cloud')!
  
  if (tagStats.length === 0) {
    container.innerHTML = '<p class="text-gray-500">暂无标签</p>'
    return
  }

  // 按使用次数排序
  tagStats.sort((a, b) => b[1] - a[1])

  // 计算字体大小（基于使用次数）
  const maxCount = Math.max(...tagStats.map(([, count]) => count))
  
  container.innerHTML = tagStats.map(([tag, count]) => {
    const fontSize = Math.max(0.75, Math.min(1.5, (count / maxCount) * 1.2 + 0.5))
    const colors = [
      'bg-blue-100 text-blue-800 hover:bg-blue-200',
      'bg-green-100 text-green-800 hover:bg-green-200',
      'bg-purple-100 text-purple-800 hover:bg-purple-200',
      'bg-pink-100 text-pink-800 hover:bg-pink-200',
      'bg-orange-100 text-orange-800 hover:bg-orange-200',
      'bg-teal-100 text-teal-800 hover:bg-teal-200'
    ]
    const colorClass = colors[Math.floor(Math.random() * colors.length)]
    
    return `
      <button 
        onclick="window.viewTagPosts('${tag}')"
        class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium transition-colors ${colorClass}"
        style="font-size: ${fontSize}rem"
        title="查看使用标签 ${tag} 的文章"
      >
        ${tag}
        <span class="ml-1 text-xs opacity-75">${count}</span>
      </button>
    `
  }).join('')
}

// 加载标签表格
function loadTagsTable(tagStats: [string, number][], posts: any[]) {
  const tbody = document.getElementById('tags-table')!
  
  if (tagStats.length === 0) {
    tbody.innerHTML = '<tr><td colspan="4" class="text-center py-4 text-gray-500">暂无标签</td></tr>'
    return
  }

  // 按使用次数排序
  tagStats.sort((a, b) => b[1] - a[1])
  
  tbody.innerHTML = tagStats.map(([tag, count]) => {
    // 找到使用该标签的文章
    const relatedPosts = posts.filter((post: any) => 
      post.tags && Array.isArray(post.tags) && post.tags.includes(tag)
    )
    
    return `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mr-3">
              <span class="text-white text-xs font-bold">#</span>
            </div>
            <div class="text-sm font-medium text-gray-900">${tag}</div>
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
            ${count} 次使用
          </span>
        </td>
        <td class="px-6 py-4">
          <div class="text-sm text-gray-500">
            ${relatedPosts.slice(0, 3).map((post: any) => post.title).join(', ')}
            ${relatedPosts.length > 3 ? `... 等 ${relatedPosts.length} 篇文章` : ''}
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
          <button 
            onclick="window.viewTagPosts('${tag}')"
            class="text-purple-600 hover:text-purple-900 mr-3"
          >
            查看文章
          </button>
        </td>
      </tr>
    `
  }).join('')
}

// 页面加载时初始化
document.addEventListener('DOMContentLoaded', () => {
  loadTags()

  // 查看标签相关文章
  window.viewTagPosts = (tag: string) => {
    // 这里可以跳转到文章列表页面并筛选该标签
    // 或者打开一个模态框显示相关文章
    alert(`功能开发中：查看标签 "${tag}" 的相关文章\n\n您可以在文章管理页面搜索该标签来查看相关文章。`)
  }
})

// 声明全局函数
declare global {
  interface Window {
    viewTagPosts: (tag: string) => void
  }
}
</script>